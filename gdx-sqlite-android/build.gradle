apply plugin: "com.android.library"

group = 'com.badlogic.gdx.sqlite'
version = rootProject.version

dependencies {
    testImplementation libs.junit4
    implementation project(":gdx-sqlite")
    implementation libs.libgdxBackendAndroid
    implementation libs.androidxAppcompat
}

android {
    namespace 'com.gdxsqlite.android'
    compileSdk android_compile_version

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion android_compile_version
        versionCode 1
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['aidl']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    lint {
        abortOnError = false
    }
}

// Task to package the Android library classes into a plain jar (without resources) for release attachments
afterEvaluate {
    tasks.register('androidJar', Jar) {
        group = 'build'
        description = 'Assembles a jar containing the compiled Android library classes.'
        from("build/intermediates/javac/release/classes") { include '**/*.class' }
        archiveBaseName.set("gdx-sqlite-android")
        archiveVersion.set(project.version as String)
        dependsOn 'compileReleaseJavaWithJavac'
    }

    // Copy AAR to build/libs for JitPack compatibility
    tasks.register('copyAarForJitPack', Copy) {
        group = 'build'
        description = 'Copies the release AAR to build/libs for JitPack to find it.'
        from 'build/outputs/aar'
        into 'build/libs'
        include '*-release.aar'
        rename { String fileName ->
            fileName.replace('-release', '')
        }
        dependsOn 'assembleRelease'
    }
}
