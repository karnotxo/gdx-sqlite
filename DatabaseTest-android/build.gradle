apply plugin: "com.android.application"

configurations { natives }

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation project(":DatabaseTest")
    implementation libs.libgdxCore
    implementation libs.libgdxBackendAndroid
    // Keep separate natives configuration for extraction task (use platform artifact coordinates)
    natives libs.libgdxPlatform
}

android {
    compileSdkVersion android_compile_version

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion android_compile_version
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard.cfg'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    // AGP 7+ prefers explicit namespace instead of manifest package
    namespace "com.gdxsqlite.test"
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.gdxsqlite.test/com.gdxsqlite.test.MainActivity'
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    group = 'build'
    description = 'Extract native .so files from libGDX platform classifier jars into libs/ABI folders.'
    doLast {
        ["armeabi-v7a","x86","x86_64","arm64-v8a"].each { abi -> file("libs/${abi}").mkdirs() }
        configurations.natives.resolvedConfiguration.resolvedArtifacts.each { art ->
            def name = art.file.name
            def abi = null
            if (name.contains('natives-armeabi-v7a')) abi = 'armeabi-v7a'
            if (name.contains('natives-x86_64')) abi = 'x86_64'
            if (name.contains('natives-arm64-v8a')) abi = 'arm64-v8a'
            if (name.matches('.*natives-x86(?!_64).*')) abi = 'x86'
            if (abi) {
                copy {
                    from zipTree(art.file)
                    into file("libs/${abi}")
                    include '*.so'
                }
            }
        }
    }
}
